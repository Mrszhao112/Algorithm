class Solution {
public:
    double myPow(double x, int n) {
        //递归或者迭代
        long long N = n;
        if (n > 0) {
            return myhelp(x, N);
        }else {
            return 1.0 / myhelp(x, -N);
        }
    }
    double myhelp(double x, long long N) {
        //递归法
        if (N == 0) {
            return 1.0;
        }
        double y = myhelp(x, N / 2);
        return N == 2 * (N / 2) ? y * y : y * y * x; 
    }
};

class Solution {
public:
    double myPow(double x, int n) {
        long long N = n;
        return n > 0 ? myhelp(x, N) : 1.0 / myhelp(x, -N);
    }
    double myhelp(double x, long long N) {
        double y = 1.0;
        double z = x;
        while (N > 0) {
            if (N % 2) {
                y *= x;
            }
            x *= x;
            N /= 2;
        }
        return y;
    }
};
