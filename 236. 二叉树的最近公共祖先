class Solution {
public:
    TreeNode* ret;
    bool dfs(TreeNode* root, TreeNode* p, TreeNode* q)
    {
        if(root == nullptr)
        {
            return false;
        }
        bool lson = dfs(root->left, p,  q);
        bool rson = dfs(root->right, p, q);
        if((lson && rson) || ((root->val == p->val) ||root->val == q->val) && (lson || rson))
        {
            ret = root;
        }
        // return true;
        return lson || rson || root->val == p->val ||root->val == q->val;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
       //递归查找 
        dfs(root, p, q);
        return ret;
    }
};

//大牛的四行代码
class Solution {
public:
        TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    
    if (!root || root == p || root == q) return root;
    TreeNode* left = lowestCommonAncestor(root->left, p, q);
    TreeNode* right = lowestCommonAncestor(root->right, p, q);
    return !left ? right : !right ? left : root;
    //if(!left)
    //{
    //    return right; 
    //}else
    //{
    //    if(!right)
    //    {
    //        return left;
    //    }
    //    else
    //    {
    //        return root;
    //    }
    //}
    }
};
